/*************************************************************************
 *                                                                       *
 *  EJBCA: The OpenSource Certificate Authority                          *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Lesser General Public           *
 *  License as published by the Free Software Foundation; either         *
 *  version 2.1 of the License, or any later version.                    *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
package org.ejbca.core.model.services.worker;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateParsingException;
import java.security.cert.X509Certificate;
import java.util.Arrays;
import java.util.List;

import org.cesecore.certificates.certificate.CertificateConstants;
import org.cesecore.certificates.crl.RevocationReasons;
import org.cesecore.util.CertTools;
import org.cesecore.util.CryptoProviderTools;
import org.cesecore.util.TraceLogMethodsRule;
import org.ejbca.core.model.services.workers.CertificateCrlReader;
import org.ejbca.scp.publisher.ScpContainer;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestRule;

/**
 * Unit tests for the CertificateCrlReader Worker
 * 
 * @version $Id: CertificateCrlReaderUnitTest.java 30518 2018-11-15 13:38:34Z bastianf $
 *
 */
public class CertificateCrlReaderUnitTest {

    /**
     * An unsigned, anonymized revocation.
     * Serial number: 2584216392625047359
     * Revocation Reason: RevocationReasons.KEYCOMPROMISE
     * Revocation Date: 1541434399560
     * Certificate Status: CertificateConstants.CERT_REVOKED
     */
    private static final byte[] CANNED_UNSIGNED_REVOCATION = new byte[] { -84, -19, 0, 5, 115, 114, 0, 36, 111, 114, 103, 46, 101, 106, 98, 99, 97,
            46, 115, 99, 112, 46, 112, 117, 98, 108, 105, 115, 104, 101, 114, 46, 83, 99, 112, 67, 111, 110, 116, 97, 105, 110, 101, 114, 0, 0, 0, 0,
            0, 0, 0, 1, 2, 0, 0, 120, 114, 0, 44, 111, 114, 103, 46, 99, 101, 115, 101, 99, 111, 114, 101, 46, 105, 110, 116, 101, 114, 110, 97, 108,
            46, 85, 112, 103, 114, 97, 100, 101, 97, 98, 108, 101, 68, 97, 116, 97, 72, 97, 115, 104, 77, 97, 112, -25, 124, -68, 83, 41, 76, 82, 71,
            2, 0, 2, 90, 0, 8, 117, 112, 103, 114, 97, 100, 101, 100, 76, 0, 4, 100, 97, 116, 97, 116, 0, 25, 76, 106, 97, 118, 97, 47, 117, 116, 105,
            108, 47, 76, 105, 110, 107, 101, 100, 72, 97, 115, 104, 77, 97, 112, 59, 120, 112, 0, 115, 114, 0, 23, 106, 97, 118, 97, 46, 117, 116,
            105, 108, 46, 76, 105, 110, 107, 101, 100, 72, 97, 115, 104, 77, 97, 112, 52, -64, 78, 92, 16, 108, -64, -5, 2, 0, 1, 90, 0, 11, 97, 99,
            99, 101, 115, 115, 79, 114, 100, 101, 114, 120, 114, 0, 17, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 77, 97, 112,
            5, 7, -38, -63, -61, 22, 96, -47, 3, 0, 2, 70, 0, 10, 108, 111, 97, 100, 70, 97, 99, 116, 111, 114, 73, 0, 9, 116, 104, 114, 101, 115,
            104, 111, 108, 100, 120, 112, 63, 64, 0, 0, 0, 0, 0, 12, 119, 8, 0, 0, 0, 16, 0, 0, 0, 6, 116, 0, 7, 118, 101, 114, 115, 105, 111, 110,
            115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70,
            0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107,
            29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 116, 0, 6, 105, 115, 115, 117, 101, 114, 116, 0, 35, 67, 78, 61, 83, 99, 112, 80,
            117, 98, 108, 105, 115, 104, 101, 114, 84, 101, 115, 116, 44, 79, 61, 80, 114, 105, 109, 101, 75, 101, 121, 44, 67, 61, 83, 69, 116, 0,
            13, 115, 101, 114, 105, 97, 108, 46, 110, 117, 109, 98, 101, 114, 115, 114, 0, 20, 106, 97, 118, 97, 46, 109, 97, 116, 104, 46, 66, 105,
            103, 73, 110, 116, 101, 103, 101, 114, -116, -4, -97, 31, -87, 59, -5, 29, 3, 0, 6, 73, 0, 8, 98, 105, 116, 67, 111, 117, 110, 116, 73, 0,
            9, 98, 105, 116, 76, 101, 110, 103, 116, 104, 73, 0, 19, 102, 105, 114, 115, 116, 78, 111, 110, 122, 101, 114, 111, 66, 121, 116, 101, 78,
            117, 109, 73, 0, 12, 108, 111, 119, 101, 115, 116, 83, 101, 116, 66, 105, 116, 73, 0, 6, 115, 105, 103, 110, 117, 109, 91, 0, 9, 109, 97,
            103, 110, 105, 116, 117, 100, 101, 116, 0, 2, 91, 66, 120, 113, 0, 126, 0, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1,
            -2, 0, 0, 0, 1, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 8, 35, -36, -5, 30, 9, 40, 71, 63,
            120, 116, 0, 15, 114, 101, 118, 111, 99, 97, 116, 105, 111, 110, 46, 100, 97, 116, 101, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97,
            110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 113, 0, 126, 0,
            9, 0, 0, 1, 102, -28, -90, 91, 72, 116, 0, 17, 114, 101, 118, 111, 99, 97, 116, 105, 111, 110, 46, 114, 101, 97, 115, 111, 110, 115, 114,
            0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73,
            0, 5, 118, 97, 108, 117, 101, 120, 113, 0, 126, 0, 9, 0, 0, 0, 1, 116, 0, 18, 99, 101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 46, 115,
            116, 97, 116, 117, 115, 115, 113, 0, 126, 0, 23, 0, 0, 0, 40, 120, 0 };

    /**
     * Canned publishing of an anonymized revocation action
     * Serial number: 8526302968153676956
     * Revocation Reason: RevocationReasons.KEYCOMPROMISE
     * Revocation Date: 1541434399560
     * Certificate Status: CertificateConstants.CERT_REVOKED
     */
    private static final byte[] CANNED_SIGNED_REVOCATION = new byte[] { 48, -128, 6, 9, 42, -122, 72, -122, -9, 13, 1, 7, 2, -96, -128, 48, -128, 2,
            1, 1, 49, 11, 48, 9, 6, 5, 43, 14, 3, 2, 26, 5, 0, 48, -128, 6, 9, 42, -122, 72, -122, -9, 13, 1, 7, 1, -96, -128, 36, -128, 4, -126, 3,
            23, -84, -19, 0, 5, 115, 114, 0, 36, 111, 114, 103, 46, 101, 106, 98, 99, 97, 46, 115, 99, 112, 46, 112, 117, 98, 108, 105, 115, 104, 101,
            114, 46, 83, 99, 112, 67, 111, 110, 116, 97, 105, 110, 101, 114, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 120, 114, 0, 44, 111, 114, 103, 46, 99,
            101, 115, 101, 99, 111, 114, 101, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 85, 112, 103, 114, 97, 100, 101, 97, 98, 108, 101, 68,
            97, 116, 97, 72, 97, 115, 104, 77, 97, 112, -25, 124, -68, 83, 41, 76, 82, 71, 2, 0, 2, 90, 0, 8, 117, 112, 103, 114, 97, 100, 101, 100,
            76, 0, 4, 100, 97, 116, 97, 116, 0, 25, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 110, 107, 101, 100, 72, 97, 115, 104,
            77, 97, 112, 59, 120, 112, 0, 115, 114, 0, 23, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 110, 107, 101, 100, 72, 97, 115,
            104, 77, 97, 112, 52, -64, 78, 92, 16, 108, -64, -5, 2, 0, 1, 90, 0, 11, 97, 99, 99, 101, 115, 115, 79, 114, 100, 101, 114, 120, 114, 0,
            17, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 77, 97, 112, 5, 7, -38, -63, -61, 22, 96, -47, 3, 0, 2, 70, 0, 10,
            108, 111, 97, 100, 70, 97, 99, 116, 111, 114, 73, 0, 9, 116, 104, 114, 101, 115, 104, 111, 108, 100, 120, 112, 63, 64, 0, 0, 0, 0, 0, 12,
            119, 8, 0, 0, 0, 16, 0, 0, 0, 6, 116, 0, 7, 118, 101, 114, 115, 105, 111, 110, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103,
            46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97,
            118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0,
            116, 0, 6, 105, 115, 115, 117, 101, 114, 116, 0, 35, 67, 78, 61, 83, 99, 112, 80, 117, 98, 108, 105, 115, 104, 101, 114, 84, 101, 115,
            116, 44, 79, 61, 80, 114, 105, 109, 101, 75, 101, 121, 44, 67, 61, 83, 69, 116, 0, 13, 115, 101, 114, 105, 97, 108, 46, 110, 117, 109, 98,
            101, 114, 115, 114, 0, 20, 106, 97, 118, 97, 46, 109, 97, 116, 104, 46, 66, 105, 103, 73, 110, 116, 101, 103, 101, 114, -116, -4, -97, 31,
            -87, 59, -5, 29, 3, 0, 6, 73, 0, 8, 98, 105, 116, 67, 111, 117, 110, 116, 73, 0, 9, 98, 105, 116, 76, 101, 110, 103, 116, 104, 73, 0, 19,
            102, 105, 114, 115, 116, 78, 111, 110, 122, 101, 114, 111, 66, 121, 116, 101, 78, 117, 109, 73, 0, 12, 108, 111, 119, 101, 115, 116, 83,
            101, 116, 66, 105, 116, 73, 0, 6, 115, 105, 103, 110, 117, 109, 91, 0, 9, 109, 97, 103, 110, 105, 116, 117, 100, 101, 116, 0, 2, 91, 66,
            120, 113, 0, 126, 0, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -2, 0, 0, 0, 1, 117, 114, 0, 2, 91, 66, -84, -13, 23,
            -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 8, 118, 83, -125, 96, 16, 40, -100, -100, 120, 116, 0, 15, 114, 101, 118, 111, 99, 97, 116,
            105, 111, 110, 46, 100, 97, 116, 101, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28,
            -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 113, 0, 126, 0, 9, 0, 0, 1, 102, -28, -90, 91, 72, 116, 0, 17,
            114, 101, 118, 111, 99, 97, 116, 105, 111, 110, 46, 114, 101, 97, 115, 111, 110, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103,
            46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 113, 0, 126,
            0, 9, 0, 0, 0, 1, 116, 0, 18, 99, 101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 46, 115, 116, 97, 116, 117, 115, 115, 113, 0, 126, 0,
            23, 0, 0, 0, 40, 120, 0, 0, 0, 0, 0, 0, 0, -96, -128, 48, -126, 3, 91, 48, -126, 2, 67, -96, 3, 2, 1, 2, 2, 8, 60, -109, 80, -21, -4, -20,
            75, 70, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 5, 5, 0, 48, 59, 49, 21, 48, 19, 6, 3, 85, 4, 3, 12, 12, 77, 97, 110, 97, 103,
            101, 109, 101, 110, 116, 67, 65, 49, 21, 48, 19, 6, 3, 85, 4, 10, 12, 12, 69, 74, 66, 67, 65, 32, 83, 97, 109, 112, 108, 101, 49, 11, 48,
            9, 6, 3, 85, 4, 6, 19, 2, 83, 69, 48, 30, 23, 13, 49, 56, 49, 49, 48, 49, 49, 50, 51, 56, 48, 49, 90, 23, 13, 50, 56, 49, 48, 50, 57, 49,
            50, 51, 56, 48, 49, 90, 48, 59, 49, 21, 48, 19, 6, 3, 85, 4, 3, 12, 12, 77, 97, 110, 97, 103, 101, 109, 101, 110, 116, 67, 65, 49, 21, 48,
            19, 6, 3, 85, 4, 10, 12, 12, 69, 74, 66, 67, 65, 32, 83, 97, 109, 112, 108, 101, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 83, 69, 48, -126,
            1, 34, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 3, -126, 1, 15, 0, 48, -126, 1, 10, 2, -126, 1, 1, 0, -75, -11, 41, 29,
            104, 107, -45, -93, -49, 16, -88, -97, -70, -44, 127, -72, 72, 35, 34, -30, 36, -39, -127, 5, 31, 17, 99, -94, 23, -13, -118, 119, -1, 97,
            -48, 45, 77, 117, 57, -95, -94, 53, 2, 99, -74, -79, 17, 69, -86, -82, 102, 122, -84, 91, -110, -24, 110, 27, 113, 61, -28, -126, 115, 35,
            38, -116, 74, -22, -13, 89, 71, -17, 106, -90, -15, -9, 53, 35, -82, -78, -22, 115, 125, 69, -56, 25, 61, -87, 41, -11, 19, 28, 20, -62,
            -102, 118, 84, -53, -108, -2, -80, -51, 45, 84, -101, 49, 123, 48, 54, -10, 96, 64, 52, -4, 53, -128, -101, -120, 58, -7, 22, -51, -24,
            -55, -56, -125, -15, -81, 116, -63, 73, -108, -42, -41, 82, 25, 91, -82, -39, -19, -13, 95, -61, -16, -60, -83, -32, 89, -21, 59, -18, -2,
            33, 10, 98, -115, 114, -89, -2, -28, -101, -48, -46, 125, -28, 93, 105, -40, -53, 77, -7, -61, -103, -99, -116, -118, 34, 66, -8, 23, 89,
            -123, 116, 65, -123, 61, 57, -36, 66, -112, 86, -92, 121, -70, -72, -34, 11, -91, -64, -48, -62, 73, 79, 56, -29, -70, 46, 12, 88, -6, 12,
            98, -125, -61, 17, 76, 26, 74, -78, 45, -48, -21, -128, -62, -19, 78, -2, -64, -68, 87, 18, 11, -29, 66, -90, -114, -65, 13, 78, -35, 117,
            -101, 1, -30, 10, 35, -81, 117, 65, -95, -56, 56, -94, -122, 88, 21, 2, 3, 1, 0, 1, -93, 99, 48, 97, 48, 15, 6, 3, 85, 29, 19, 1, 1, -1,
            4, 5, 48, 3, 1, 1, -1, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, -128, 20, 33, 113, -99, -111, -5, -115, 56, 43, 59, 125, -104, -55, 67, 9,
            -87, 97, -52, 109, 14, -16, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 33, 113, -99, -111, -5, -115, 56, 43, 59, 125, -104, -55, 67, 9, -87,
            97, -52, 109, 14, -16, 48, 14, 6, 3, 85, 29, 15, 1, 1, -1, 4, 4, 3, 2, 1, -122, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 5, 5, 0,
            3, -126, 1, 1, 0, 22, -105, -50, -89, 23, -27, -32, -111, 120, 88, -31, 77, 5, -92, -105, 0, -101, -72, -108, 44, -110, 44, -25, 113, 127,
            -12, 122, 26, -108, 121, -104, 79, 117, 108, -80, -105, -90, 1, -114, 36, -74, -75, 123, 13, 10, 43, -11, 12, -101, 87, 116, 125, -51,
            -86, 28, -121, 50, 51, -15, -65, -125, 69, 27, 54, 5, -27, -43, 47, -113, 10, 113, 21, 54, -99, -57, 116, 48, 22, -22, 44, -64, 99, -46,
            -125, 111, -42, 66, -86, -88, -1, 73, -114, -48, 30, 44, 41, 104, -91, 100, -121, -27, 84, 17, 106, 51, -123, -66, -59, -15, -110, 106,
            -40, -97, 22, 24, -11, -85, -22, -27, -110, 64, -96, -121, 18, 44, 22, -119, 41, 124, 77, -94, -46, 31, -13, 22, 38, 2, 22, -107, 96, 4,
            55, 43, 79, -49, -116, 120, -86, 27, -60, 0, 60, 25, 85, -49, -97, 40, -28, -109, -64, -61, 10, -111, -118, -54, -85, -36, -62, 72, 10,
            90, 62, 20, 110, 127, -70, -53, 86, -20, -12, 82, -45, -29, 49, -23, 94, 102, -46, -8, 22, -113, 120, 47, -18, -70, -100, -59, 107, -119,
            16, -28, -56, -121, -75, 102, -4, -62, 72, -33, 52, -91, -125, 69, -61, -25, -10, -69, 39, -6, -89, -104, 103, -102, 61, 67, 62, 119,
            -126, 42, -43, 123, 13, -58, -67, -49, 68, 95, -38, 57, 107, 111, 7, -23, -111, -80, -42, -12, 73, -53, -13, -11, 32, 17, 58, -18, 24, 0,
            0, 49, -126, 1, -7, 48, -126, 1, -11, 2, 1, 1, 48, 71, 48, 59, 49, 21, 48, 19, 6, 3, 85, 4, 3, 12, 12, 77, 97, 110, 97, 103, 101, 109,
            101, 110, 116, 67, 65, 49, 21, 48, 19, 6, 3, 85, 4, 10, 12, 12, 69, 74, 66, 67, 65, 32, 83, 97, 109, 112, 108, 101, 49, 11, 48, 9, 6, 3,
            85, 4, 6, 19, 2, 83, 69, 2, 8, 60, -109, 80, -21, -4, -20, 75, 70, 48, 9, 6, 5, 43, 14, 3, 2, 26, 5, 0, -96, -127, -120, 48, 24, 6, 9, 42,
            -122, 72, -122, -9, 13, 1, 9, 3, 49, 11, 6, 9, 42, -122, 72, -122, -9, 13, 1, 7, 1, 48, 28, 6, 9, 42, -122, 72, -122, -9, 13, 1, 9, 5, 49,
            15, 23, 13, 49, 56, 49, 49, 48, 57, 49, 52, 49, 56, 52, 53, 90, 48, 35, 6, 9, 42, -122, 72, -122, -9, 13, 1, 9, 4, 49, 22, 4, 20, 104, 86,
            112, 13, -95, 81, -22, -38, -127, 39, 78, 40, -33, -67, 123, 101, -51, -97, 84, 120, 48, 41, 6, 9, 42, -122, 72, -122, -9, 13, 1, 9, 52,
            49, 28, 48, 26, 48, 9, 6, 5, 43, 14, 3, 2, 26, 5, 0, -95, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 48, 13, 6, 9, 42, -122, 72,
            -122, -9, 13, 1, 1, 1, 5, 0, 4, -126, 1, 0, 54, -82, 106, -91, 109, -13, -101, -71, -114, -21, -77, 99, 18, -124, -66, -112, -82, 50, 80,
            -72, 69, -66, -12, -23, 73, -107, -118, -90, -49, -57, -48, 49, -43, -105, -11, 16, 62, -53, 71, 120, -24, -74, -62, 40, 116, 28, 85, -91,
            28, -7, 20, -128, -36, -105, 15, -15, -8, -27, 5, -104, -115, -61, 21, 18, 124, 9, -73, 48, -71, -9, 113, 92, -126, 69, -45, 75, -92, -24,
            -102, -57, 65, -14, -77, -97, -85, 68, -22, 82, 44, 89, 124, 12, -94, 47, -78, 50, -83, 29, 100, -76, 110, 61, -85, -7, -70, -101, -84,
            62, -9, -126, 125, 54, 76, -10, 85, -82, -73, 31, -65, -14, 19, -47, -110, 56, 69, 38, -25, -127, 115, -62, 57, 4, -60, -79, -60, 47, -32,
            -99, -2, -116, 45, -102, 27, -118, 6, 51, -80, 6, -5, 24, 84, 28, 85, 16, -122, -34, -5, 114, 8, -56, -24, 20, 70, -101, 108, 42, 65, 11,
            58, 46, 121, -6, 71, -65, -98, -68, 64, 110, 73, -4, 85, -54, -36, 52, 9, -47, 63, 88, -41, -127, -99, 82, 8, -78, 56, -25, 72, 84, -10,
            74, 6, -68, 84, 83, 91, 52, 110, -45, 110, 57, -65, 90, 102, 34, 113, 86, 13, 35, 69, -23, -36, -76, 32, -80, -66, 76, 107, -123, -108,
            67, -114, -93, -14, 47, -117, -26, -31, 43, -42, -4, 32, 120, -10, 70, 30, -100, 30, -25, -27, -111, -52, 104, -67, 35, -51, -29, 0, 0, 0,
            0, 0, 0 };

    /**
     * The certificate used in the below example. 
     */
    private static final String PUBLISHED_FULL_CERTIFICATE = "-----BEGIN CERTIFICATE-----\n"
            +"MIIB0TCCAXugAwIBAgIILw4iScGvWwcwDQYJKoZIhvcNAQEFBQAwOzEZMBcGA1UE\n"
            +"AwwQU2NwUHVibGlzaGVyVGVzdDERMA8GA1UECgwIUHJpbWVLZXkxCzAJBgNVBAYT\n"
            +"AlNFMB4XDTE4MTEwOTE1MTU1MVoXDTE5MTEwOTE1MjU1MVowOzEZMBcGA1UEAwwQ\n"
            +"U2NwUHVibGlzaGVyVGVzdDERMA8GA1UECgwIUHJpbWVLZXkxCzAJBgNVBAYTAlNF\n"
            +"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAL6Fq9tQmFJLgJ27d0HWxdl5Zpr9/qMX\n"
            +"4TcpN1N2AchpmjXW5dm3m3soJVTS+ktG/O+W/La6FWq5ijSg/hpp0psCAwEAAaNj\n"
            +"MGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFN2g\n"
            +" REpQY6kE2n4J4Zvg1bW2TuEyMB8GA1UdIwQYMBaAFN2gREpQY6kE2n4J4Zvg1bW2\n"
            +"TuEyMA0GCSqGSIb3DQEBBQUAA0EANJG8RgNxk8qxJQp3K5LgxB61NqtQ1n6sAxSl\n"
            +"Pp/dey4P7JOfIgJTbbsJajiOTZ0Q6ubib+lBWjTfsNh2PYeAgQ==\n"
            +"-----END CERTIFICATE-----";

    /**
     * An signed, non-anonymized revocation.
     * Serial number: 3390685269634013959
     * Revocation Reason: RevocationReasons.KEYCOMPROMISE
     * Revocation Date: 1541434399560
     * Certificate Status: CertificateConstants.CERT_REVOKED
     */
    private static final byte[] CANNED_FULL_SIGNED_REVOCATION = new byte[] { 48, -128, 6, 9, 42, -122, 72, -122, -9, 13, 1, 7, 2, -96, -128, 48, -128,
            2, 1, 1, 49, 11, 48, 9, 6, 5, 43, 14, 3, 2, 26, 5, 0, 48, -128, 6, 9, 42, -122, 72, -122, -9, 13, 1, 7, 1, -96, -128, 36, -128, 4, -126,
            3, -24, -84, -19, 0, 5, 115, 114, 0, 36, 111, 114, 103, 46, 101, 106, 98, 99, 97, 46, 115, 99, 112, 46, 112, 117, 98, 108, 105, 115, 104,
            101, 114, 46, 83, 99, 112, 67, 111, 110, 116, 97, 105, 110, 101, 114, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 120, 114, 0, 44, 111, 114, 103, 46,
            99, 101, 115, 101, 99, 111, 114, 101, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 85, 112, 103, 114, 97, 100, 101, 97, 98, 108, 101,
            68, 97, 116, 97, 72, 97, 115, 104, 77, 97, 112, -25, 124, -68, 83, 41, 76, 82, 71, 2, 0, 2, 90, 0, 8, 117, 112, 103, 114, 97, 100, 101,
            100, 76, 0, 4, 100, 97, 116, 97, 116, 0, 25, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 110, 107, 101, 100, 72, 97, 115,
            104, 77, 97, 112, 59, 120, 112, 0, 115, 114, 0, 23, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 110, 107, 101, 100, 72, 97,
            115, 104, 77, 97, 112, 52, -64, 78, 92, 16, 108, -64, -5, 2, 0, 1, 90, 0, 11, 97, 99, 99, 101, 115, 115, 79, 114, 100, 101, 114, 120, 114,
            0, 17, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 77, 97, 112, 5, 7, -38, -63, -61, 22, 96, -47, 3, 0, 2, 70, 0, 10,
            108, 111, 97, 100, 70, 97, 99, 116, 111, 114, 73, 0, 9, 116, 104, 114, 101, 115, 104, 111, 108, 100, 120, 112, 63, 64, 0, 0, 0, 0, 0, 12,
            119, 8, 0, 0, 0, 16, 0, 0, 0, 11, 116, 0, 7, 118, 101, 114, 115, 105, 111, 110, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103,
            46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97,
            118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0,
            116, 0, 6, 105, 115, 115, 117, 101, 114, 116, 0, 35, 67, 78, 61, 83, 99, 112, 80, 117, 98, 108, 105, 115, 104, 101, 114, 84, 101, 115,
            116, 44, 79, 61, 80, 114, 105, 109, 101, 75, 101, 121, 44, 67, 61, 83, 69, 116, 0, 13, 115, 101, 114, 105, 97, 108, 46, 110, 117, 109, 98,
            101, 114, 115, 114, 0, 20, 106, 97, 118, 97, 46, 109, 97, 116, 104, 46, 66, 105, 103, 73, 110, 116, 101, 103, 101, 114, -116, -4, -97, 31,
            -87, 59, -5, 29, 3, 0, 6, 73, 0, 8, 98, 105, 116, 67, 111, 117, 110, 116, 73, 0, 9, 98, 105, 116, 76, 101, 110, 103, 116, 104, 73, 0, 19,
            102, 105, 114, 115, 116, 78, 111, 110, 122, 101, 114, 111, 66, 121, 116, 101, 78, 117, 109, 73, 0, 12, 108, 111, 119, 101, 115, 116, 83,
            101, 116, 66, 105, 116, 73, 0, 6, 115, 105, 103, 110, 117, 109, 91, 0, 9, 109, 97, 103, 110, 105, 116, 117, 100, 101, 116, 0, 2, 91, 66,
            120, 113, 0, 126, 0, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -2, 0, 0, 0, 1, 117, 114, 0, 2, 91, 66, -84, -13, 23,
            -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 8, 47, 14, 34, 73, -63, -81, 91, 7, 120, 116, 0, 15, 114, 101, 118, 111, 99, 97, 116, 105,
            111, 110, 46, 100, 97, 116, 101, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112,
            -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 113, 0, 126, 0, 9, 0, 0, 1, 102, -28, -90, 91, 72, 116, 0, 17, 114,
            101, 118, 111, 99, 97, 116, 105, 111, 110, 46, 114, 101, 97, 115, 111, 110, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46,
            73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 113, 0, 126, 0,
            9, 0, 0, 0, 1, 116, 0, 18, 99, 101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 46, 115, 116, 97, 116, 117, 115, 115, 113, 0, 126, 0, 23,
            0, 0, 0, 40, 116, 0, 11, 99, 101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 117, 113, 0, 126, 0, 17, 0, 0, 1, -43, 48, -126, 1, -47, 48,
            -126, 1, 123, -96, 3, 2, 1, 2, 2, 8, 47, 14, 34, 73, -63, -81, 91, 7, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 5, 5, 0, 48, 59, 49,
            25, 48, 23, 6, 3, 85, 4, 3, 12, 16, 83, 99, 112, 80, 117, 98, 108, 105, 115, 104, 101, 114, 84, 101, 115, 116, 49, 17, 48, 15, 6, 3, 85,
            4, 10, 12, 8, 80, 114, 105, 109, 101, 75, 101, 121, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 83, 69, 48, 30, 23, 13, 49, 56, 49, 49, 48, 57,
            49, 53, 49, 53, 53, 49, 90, 23, 13, 49, 57, 49, 49, 48, 57, 49, 53, 50, 53, 53, 49, 90, 48, 59, 49, 25, 48, 23, 6, 3, 85, 4, 3, 12, 16,
            83, 99, 112, 80, 117, 98, 108, 105, 115, 104, 101, 114, 84, 101, 115, 116, 49, 17, 48, 15, 6, 3, 85, 4, 10, 12, 8, 80, 114, 105, 109, 101,
            75, 101, 121, 49, 11, 48, 9, 6, 3, 85, 4, 4, -126, 1, -118, 6, 19, 2, 83, 69, 48, 92, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1,
            5, 0, 3, 75, 0, 48, 72, 2, 65, 0, -66, -123, -85, -37, 80, -104, 82, 75, -128, -99, -69, 119, 65, -42, -59, -39, 121, 102, -102, -3, -2,
            -93, 23, -31, 55, 41, 55, 83, 118, 1, -56, 105, -102, 53, -42, -27, -39, -73, -101, 123, 40, 37, 84, -46, -6, 75, 70, -4, -17, -106, -4,
            -74, -70, 21, 106, -71, -118, 52, -96, -2, 26, 105, -46, -101, 2, 3, 1, 0, 1, -93, 99, 48, 97, 48, 15, 6, 3, 85, 29, 19, 1, 1, -1, 4, 5,
            48, 3, 1, 1, -1, 48, 14, 6, 3, 85, 29, 15, 1, 1, -1, 4, 4, 3, 2, 1, 6, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, -35, -96, 68, 74, 80, 99,
            -87, 4, -38, 126, 9, -31, -101, -32, -43, -75, -74, 78, -31, 50, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, -128, 20, -35, -96, 68, 74, 80,
            99, -87, 4, -38, 126, 9, -31, -101, -32, -43, -75, -74, 78, -31, 50, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 5, 5, 0, 3, 65, 0,
            52, -111, -68, 70, 3, 113, -109, -54, -79, 37, 10, 119, 43, -110, -32, -60, 30, -75, 54, -85, 80, -42, 126, -84, 3, 20, -91, 62, -97, -35,
            123, 46, 15, -20, -109, -97, 34, 2, 83, 109, -69, 9, 106, 56, -114, 77, -99, 16, -22, -26, -30, 111, -23, 65, 90, 52, -33, -80, -40, 118,
            61, -121, -128, -127, 116, 0, 8, 117, 115, 101, 114, 110, 97, 109, 101, 116, 0, 12, 83, 99, 112, 67, 111, 110, 116, 97, 105, 110, 101,
            114, 116, 0, 16, 99, 101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 46, 116, 121, 112, 101, 113, 0, 126, 0, 24, 116, 0, 19, 99, 101, 114,
            116, 105, 102, 105, 99, 97, 116, 101, 46, 112, 114, 111, 102, 105, 108, 101, 115, 113, 0, 126, 0, 23, 0, 0, 5, 57, 116, 0, 11, 117, 112,
            100, 97, 116, 101, 46, 116, 105, 109, 101, 115, 113, 0, 126, 0, 20, 0, 0, 0, 0, 0, 0, 18, 103, 120, 0, 0, 0, 0, 0, 0, 0, -96, -128, 48,
            -126, 3, 91, 48, -126, 2, 67, -96, 3, 2, 1, 2, 2, 8, 60, -109, 80, -21, -4, -20, 75, 70, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1,
            5, 5, 0, 48, 59, 49, 21, 48, 19, 6, 3, 85, 4, 3, 12, 12, 77, 97, 110, 97, 103, 101, 109, 101, 110, 116, 67, 65, 49, 21, 48, 19, 6, 3, 85,
            4, 10, 12, 12, 69, 74, 66, 67, 65, 32, 83, 97, 109, 112, 108, 101, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 83, 69, 48, 30, 23, 13, 49, 56,
            49, 49, 48, 49, 49, 50, 51, 56, 48, 49, 90, 23, 13, 50, 56, 49, 48, 50, 57, 49, 50, 51, 56, 48, 49, 90, 48, 59, 49, 21, 48, 19, 6, 3, 85,
            4, 3, 12, 12, 77, 97, 110, 97, 103, 101, 109, 101, 110, 116, 67, 65, 49, 21, 48, 19, 6, 3, 85, 4, 10, 12, 12, 69, 74, 66, 67, 65, 32, 83,
            97, 109, 112, 108, 101, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 83, 69, 48, -126, 1, 34, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1,
            5, 0, 3, -126, 1, 15, 0, 48, -126, 1, 10, 2, -126, 1, 1, 0, -75, -11, 41, 29, 104, 107, -45, -93, -49, 16, -88, -97, -70, -44, 127, -72,
            72, 35, 34, -30, 36, -39, -127, 5, 31, 17, 99, -94, 23, -13, -118, 119, -1, 97, -48, 45, 77, 117, 57, -95, -94, 53, 2, 99, -74, -79, 17,
            69, -86, -82, 102, 122, -84, 91, -110, -24, 110, 27, 113, 61, -28, -126, 115, 35, 38, -116, 74, -22, -13, 89, 71, -17, 106, -90, -15, -9,
            53, 35, -82, -78, -22, 115, 125, 69, -56, 25, 61, -87, 41, -11, 19, 28, 20, -62, -102, 118, 84, -53, -108, -2, -80, -51, 45, 84, -101, 49,
            123, 48, 54, -10, 96, 64, 52, -4, 53, -128, -101, -120, 58, -7, 22, -51, -24, -55, -56, -125, -15, -81, 116, -63, 73, -108, -42, -41, 82,
            25, 91, -82, -39, -19, -13, 95, -61, -16, -60, -83, -32, 89, -21, 59, -18, -2, 33, 10, 98, -115, 114, -89, -2, -28, -101, -48, -46, 125,
            -28, 93, 105, -40, -53, 77, -7, -61, -103, -99, -116, -118, 34, 66, -8, 23, 89, -123, 116, 65, -123, 61, 57, -36, 66, -112, 86, -92, 121,
            -70, -72, -34, 11, -91, -64, -48, -62, 73, 79, 56, -29, -70, 46, 12, 88, -6, 12, 98, -125, -61, 17, 76, 26, 74, -78, 45, -48, -21, -128,
            -62, -19, 78, -2, -64, -68, 87, 18, 11, -29, 66, -90, -114, -65, 13, 78, -35, 117, -101, 1, -30, 10, 35, -81, 117, 65, -95, -56, 56, -94,
            -122, 88, 21, 2, 3, 1, 0, 1, -93, 99, 48, 97, 48, 15, 6, 3, 85, 29, 19, 1, 1, -1, 4, 5, 48, 3, 1, 1, -1, 48, 31, 6, 3, 85, 29, 35, 4, 24,
            48, 22, -128, 20, 33, 113, -99, -111, -5, -115, 56, 43, 59, 125, -104, -55, 67, 9, -87, 97, -52, 109, 14, -16, 48, 29, 6, 3, 85, 29, 14,
            4, 22, 4, 20, 33, 113, -99, -111, -5, -115, 56, 43, 59, 125, -104, -55, 67, 9, -87, 97, -52, 109, 14, -16, 48, 14, 6, 3, 85, 29, 15, 1, 1,
            -1, 4, 4, 3, 2, 1, -122, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 5, 5, 0, 3, -126, 1, 1, 0, 22, -105, -50, -89, 23, -27, -32,
            -111, 120, 88, -31, 77, 5, -92, -105, 0, -101, -72, -108, 44, -110, 44, -25, 113, 127, -12, 122, 26, -108, 121, -104, 79, 117, 108, -80,
            -105, -90, 1, -114, 36, -74, -75, 123, 13, 10, 43, -11, 12, -101, 87, 116, 125, -51, -86, 28, -121, 50, 51, -15, -65, -125, 69, 27, 54, 5,
            -27, -43, 47, -113, 10, 113, 21, 54, -99, -57, 116, 48, 22, -22, 44, -64, 99, -46, -125, 111, -42, 66, -86, -88, -1, 73, -114, -48, 30,
            44, 41, 104, -91, 100, -121, -27, 84, 17, 106, 51, -123, -66, -59, -15, -110, 106, -40, -97, 22, 24, -11, -85, -22, -27, -110, 64, -96,
            -121, 18, 44, 22, -119, 41, 124, 77, -94, -46, 31, -13, 22, 38, 2, 22, -107, 96, 4, 55, 43, 79, -49, -116, 120, -86, 27, -60, 0, 60, 25,
            85, -49, -97, 40, -28, -109, -64, -61, 10, -111, -118, -54, -85, -36, -62, 72, 10, 90, 62, 20, 110, 127, -70, -53, 86, -20, -12, 82, -45,
            -29, 49, -23, 94, 102, -46, -8, 22, -113, 120, 47, -18, -70, -100, -59, 107, -119, 16, -28, -56, -121, -75, 102, -4, -62, 72, -33, 52,
            -91, -125, 69, -61, -25, -10, -69, 39, -6, -89, -104, 103, -102, 61, 67, 62, 119, -126, 42, -43, 123, 13, -58, -67, -49, 68, 95, -38, 57,
            107, 111, 7, -23, -111, -80, -42, -12, 73, -53, -13, -11, 32, 17, 58, -18, 24, 0, 0, 49, -126, 1, -7, 48, -126, 1, -11, 2, 1, 1, 48, 71,
            48, 59, 49, 21, 48, 19, 6, 3, 85, 4, 3, 12, 12, 77, 97, 110, 97, 103, 101, 109, 101, 110, 116, 67, 65, 49, 21, 48, 19, 6, 3, 85, 4, 10,
            12, 12, 69, 74, 66, 67, 65, 32, 83, 97, 109, 112, 108, 101, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 83, 69, 2, 8, 60, -109, 80, -21, -4,
            -20, 75, 70, 48, 9, 6, 5, 43, 14, 3, 2, 26, 5, 0, -96, -127, -120, 48, 24, 6, 9, 42, -122, 72, -122, -9, 13, 1, 9, 3, 49, 11, 6, 9, 42,
            -122, 72, -122, -9, 13, 1, 7, 1, 48, 28, 6, 9, 42, -122, 72, -122, -9, 13, 1, 9, 5, 49, 15, 23, 13, 49, 56, 49, 49, 48, 57, 49, 53, 50,
            53, 53, 49, 90, 48, 35, 6, 9, 42, -122, 72, -122, -9, 13, 1, 9, 4, 49, 22, 4, 20, -22, -50, -99, -109, 15, 98, 52, -104, 60, 3, -103, 64,
            11, 107, -31, 90, -122, 117, 122, 31, 48, 41, 6, 9, 42, -122, 72, -122, -9, 13, 1, 9, 52, 49, 28, 48, 26, 48, 9, 6, 5, 43, 14, 3, 2, 26,
            5, 0, -95, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 4, -126, 1, 0,
            53, 126, -116, -126, -113, 42, -26, -5, 91, 53, -78, 67, 104, -83, 78, 63, -128, 68, 71, -92, -10, -66, -120, -81, -9, 95, 18, 30, -92,
            -124, -9, 19, 42, -58, -115, 62, 5, -120, 92, 58, -57, -2, -30, 34, 62, 24, 34, 3, 122, -24, 93, -125, 121, -55, -112, -93, 105, -104,
            -86, -123, 87, -66, -14, 54, 5, -10, -83, 46, -28, -56, -56, 88, -62, -37, -27, 8, 78, 66, 101, 18, 108, 111, -80, 98, -2, -56, -60, 23,
            23, -38, -65, 102, -83, 101, 94, -114, 70, 125, 62, -91, 14, -7, 49, 18, 124, -53, -109, -74, -128, 94, -4, -48, -96, 83, 66, 84, -97,
            -34, -94, 47, -49, 67, 67, -77, -12, -106, -124, -114, -73, -58, -83, 121, -70, -14, -80, -75, 23, 68, -8, -122, -26, 106, -28, 20, 6, 82,
            -43, 126, 104, 50, -110, -106, -71, -77, 78, 57, -15, 103, 5, 119, -104, 34, 15, 53, 53, 27, -114, 94, -126, 44, -126, -54, 82, 60, -9,
            -106, 47, 96, -110, 72, -55, -117, -6, 57, -4, 118, -46, -112, 28, -110, 90, 89, -48, -5, 63, 50, 58, 85, 96, 97, -63, 97, 39, -100, 66,
            -24, -23, 82, -62, -40, -36, -33, 60, 53, 65, -16, -93, -115, 117, 64, 42, -2, 105, -15, -10, -29, 125, -21, 9, 19, 10, 19, 127, -94, 21,
            -33, -87, -128, -68, -65, -51, -21, 52, -6, -97, -55, 74, 50, -31, -87, -89, -8, 122, 84, -82, -33, 0, 0, 0, 0, 0, 0 };;

    /**
     * The CA certificate used to sign the above ScpContainers
     */
    private static final String SIGNING_CA_CERT = "-----BEGIN CERTIFICATE-----\n"
            + "MIIDWzCCAkOgAwIBAgIIPJNQ6/zsS0YwDQYJKoZIhvcNAQEFBQAwOzEVMBMGA1UE\n"
            + "AwwMTWFuYWdlbWVudENBMRUwEwYDVQQKDAxFSkJDQSBTYW1wbGUxCzAJBgNVBAYT\n"
            + "AlNFMB4XDTE4MTEwMTEyMzgwMVoXDTI4MTAyOTEyMzgwMVowOzEVMBMGA1UEAwwM\n"
            + "TWFuYWdlbWVudENBMRUwEwYDVQQKDAxFSkJDQSBTYW1wbGUxCzAJBgNVBAYTAlNF\n"
            + "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtfUpHWhr06PPEKifutR/\n"
            + "uEgjIuIk2YEFHxFjohfzinf/YdAtTXU5oaI1AmO2sRFFqq5meqxbkuhuG3E95IJz\n"
            + "IyaMSurzWUfvaqbx9zUjrrLqc31FyBk9qSn1ExwUwpp2VMuU/rDNLVSbMXswNvZg\n"
            + "QDT8NYCbiDr5Fs3oyciD8a90wUmU1tdSGVuu2e3zX8PwxK3gWes77v4hCmKNcqf+\n"
            + "5JvQ0n3kXWnYy035w5mdjIoiQvgXWYV0QYU9OdxCkFakebq43gulwNDCSU8447ou\n"
            + "DFj6DGKDwxFMGkqyLdDrgMLtTv7AvFcSC+NCpo6/DU7ddZsB4gojr3VBocg4ooZY\n"
            + "FQIDAQABo2MwYTAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFCFxnZH7jTgr\n"
            + "O32YyUMJqWHMbQ7wMB0GA1UdDgQWBBQhcZ2R+404Kzt9mMlDCalhzG0O8DAOBgNV\n"
            + "HQ8BAf8EBAMCAYYwDQYJKoZIhvcNAQEFBQADggEBABaXzqcX5eCReFjhTQWklwCb\n"
            + "uJQskizncX/0ehqUeZhPdWywl6YBjiS2tXsNCiv1DJtXdH3NqhyHMjPxv4NFGzYF\n"
            + "5dUvjwpxFTadx3QwFuoswGPSg2/WQqqo/0mO0B4sKWilZIflVBFqM4W+xfGSatif\n"
            + "Fhj1q+rlkkCghxIsFokpfE2i0h/zFiYCFpVgBDcrT8+MeKobxAA8GVXPnyjkk8DD\n"
            + "CpGKyqvcwkgKWj4Ubn+6y1bs9FLT4zHpXmbS+BaPeC/uupzFa4kQ5MiHtWb8wkjf\n"
            + "NKWDRcPn9rsn+qeYZ5o9Qz53girVew3Gvc9EX9o5a28H6ZGw1vRJy/P1IBE67hg=\n" 
            + "-----END CERTIFICATE-----";
    
    @Rule
    public TestRule traceLogMethodsRule = new TraceLogMethodsRule();

    @BeforeClass
    public static void beforeClass() {
        CryptoProviderTools.installBCProviderIfNotAvailable();
    }

    /**
     * This test will see if a revocation request can be unwrapped and examined. 
     * 
     * In order to not rely on other parts of EJBCA, important methods will be reflected out and unit tested out of context. 
     */
    @Test
    public void testUnwrapRedactedSignedData() throws NoSuchMethodException, SecurityException, CertificateParsingException, IllegalAccessException,
            IllegalArgumentException, InvocationTargetException {
        CertificateCrlReader certificateCrlReader = new CertificateCrlReader();
        Method getAndVerifySignedData = CertificateCrlReader.class.getDeclaredMethod("getAndVerifySignedData", byte[].class, List.class);
        getAndVerifySignedData.setAccessible(true);
        X509Certificate signingCaCertificate = CertTools.getCertfromByteArray(SIGNING_CA_CERT.getBytes(), X509Certificate.class);
        //First let's see if we can verify the signature and unwrap the original byte array from the envelope
        byte[] unwrappedData = (byte[]) getAndVerifySignedData.invoke(certificateCrlReader, CANNED_SIGNED_REVOCATION,
                Arrays.asList(signingCaCertificate));
        //Next let's see if we can deserialize the container
        Method unwrapScpContainer = CertificateCrlReader.class.getDeclaredMethod("unwrapScpContainer", byte[].class);
        unwrapScpContainer.setAccessible(true);
        ScpContainer scpContainer = (ScpContainer) unwrapScpContainer.invoke(certificateCrlReader, unwrappedData);
        //Values recorded from when the canned certificate was created
        assertNull("Redacted SCT container contained a certificate object", scpContainer.getCertificate());
        assertEquals("SCP Container was not deserialized with the correct status.", CertificateConstants.CERT_REVOKED,
                scpContainer.getCertificateStatus());
        assertEquals("SCP Container was not deserialized with the correct revocation reason.", RevocationReasons.KEYCOMPROMISE.getDatabaseValue(),
                scpContainer.getRevocationReason());
        assertEquals("SCP Container was not deserialized with the correct revocation date.", 1541434399560L, scpContainer.getRevocationDate());
        assertEquals("SCP Container was not deserialized with the correct serial number.", BigInteger.valueOf(8526302968153676956L),
                scpContainer.getSerialNumber());

    }

    /**
     * This test will see if a revocation request that wasn't signed can be unwrapped and examined. 
     * 
     * In order to not rely on other parts of EJBCA, important methods will be reflected out and unit tested out of context. 
     */
    @Test
    public void testUnwrapRedactedUnsignedData() throws NoSuchMethodException, SecurityException, CertificateParsingException, IllegalAccessException,
            IllegalArgumentException, InvocationTargetException {
        CertificateCrlReader certificateCrlReader = new CertificateCrlReader();
        Method getAndVerifySignedData = CertificateCrlReader.class.getDeclaredMethod("getAndVerifySignedData", byte[].class, List.class);
        getAndVerifySignedData.setAccessible(true);
        //First let's see if we can verify the signature and unwrap the original byte array from the envelope
        byte[] unwrappedData = (byte[]) getAndVerifySignedData.invoke(certificateCrlReader, CANNED_UNSIGNED_REVOCATION, null);
        //Next let's see if we can deserialize the container
        Method unwrapScpContainer = CertificateCrlReader.class.getDeclaredMethod("unwrapScpContainer", byte[].class);
        unwrapScpContainer.setAccessible(true);
        ScpContainer scpContainer = (ScpContainer) unwrapScpContainer.invoke(certificateCrlReader, unwrappedData);
        //Values recorded from when the canned certificate was created
        assertNull("Redacted SCT container contained a certificate object", scpContainer.getCertificate());
        assertEquals("SCP Container was not deserialized with the correct status.", CertificateConstants.CERT_REVOKED,
                scpContainer.getCertificateStatus());
        assertEquals("SCP Container was not deserialized with the correct revocation reason.", RevocationReasons.KEYCOMPROMISE.getDatabaseValue(),
                scpContainer.getRevocationReason());
        assertEquals("SCP Container was not deserialized with the correct revocation date.", 1541434399560L, scpContainer.getRevocationDate());
        assertEquals("SCP Container was not deserialized with the correct revocation date.", BigInteger.valueOf(2584216392625047359L),
                scpContainer.getSerialNumber());

    }

    /**
     * This test will see if a revocation request with full info can be unwrapped and examined. 
     * 
     * In order to not rely on other parts of EJBCA, important methods will be reflected out and unit tested out of context. 
     */
    @Test
    public void testUnwrapUnredactedSignedData() throws NoSuchMethodException, SecurityException, CertificateParsingException, IllegalAccessException,
            IllegalArgumentException, InvocationTargetException, CertificateEncodingException {
        CertificateCrlReader certificateCrlReader = new CertificateCrlReader();
        Method getAndVerifySignedData = CertificateCrlReader.class.getDeclaredMethod("getAndVerifySignedData", byte[].class, List.class);
        getAndVerifySignedData.setAccessible(true);
        X509Certificate signingCaCertificate = CertTools.getCertfromByteArray(SIGNING_CA_CERT.getBytes(), X509Certificate.class);
        //First let's see if we can verify the signature and unwrap the original byte array from the envelope
        byte[] unwrappedData = (byte[]) getAndVerifySignedData.invoke(certificateCrlReader, CANNED_FULL_SIGNED_REVOCATION,
                Arrays.asList(signingCaCertificate));
        //Next let's see if we can deserialize the container
        Method unwrapScpContainer = CertificateCrlReader.class.getDeclaredMethod("unwrapScpContainer", byte[].class);
        unwrapScpContainer.setAccessible(true);
        ScpContainer scpContainer = (ScpContainer) unwrapScpContainer.invoke(certificateCrlReader, unwrappedData);
        //Values recorded from when the canned certificate was created
        assertEquals("SCP Container was not deserialized with the correct status.", CertificateConstants.CERT_REVOKED,
                scpContainer.getCertificateStatus());
        assertEquals("SCP Container was not deserialized with the correct revocation reason.", RevocationReasons.KEYCOMPROMISE.getDatabaseValue(),
                scpContainer.getRevocationReason());
        assertEquals("SCP Container was not deserialized with the correct revocation date.", 1541434399560L, scpContainer.getRevocationDate());
        assertEquals("SCP Container was not deserialized with the correct serial number.", BigInteger.valueOf(3390685269634013959L),
                scpContainer.getSerialNumber());
        X509Certificate originalCertificate = CertTools.getCertfromByteArray(PUBLISHED_FULL_CERTIFICATE.getBytes(), X509Certificate.class);
        assertEquals("Unredacted SCT container did not contain the correct certificate object", originalCertificate, scpContainer.getCertificate());
        final String username = "ScpContainer";
        assertEquals("Unredacted SCT container did not contain the correct username", username, scpContainer.getUsername());
        assertEquals("Unredacted SCT container did not contain the correct type definition", CertificateConstants.CERTTYPE_ENDENTITY,
                scpContainer.getCertificateType());
        final int certificateProfileId = 1337;
        assertEquals("Unredacted SCT container did not contain the correct certificate profile", certificateProfileId,
                scpContainer.getCertificateProfile());
        final long lastUpdate = 4711L;
        assertEquals("Unredacted SCT container did not contain the correct update time", lastUpdate, scpContainer.getUpdateTime());
    }

}
